*orgguide.txt*          For Vim version 7.3          Last change: 2011 August 14

     _  _  ____  __  __    _____  ____   ___  __  __  _____  ____  ____ 
    ( \/ )(_  _)(  \/  )  (  _  )(  _ \ / __)(  \/  )(  _  )(  _ \( ___)
     \  /  _)(_  )    (    )(_)(  )   /( (_-. )    (  )(_)(  )(_) ))__) 
      \/  (____)(_/\/\_)  (_____)(_)\_) \___/(_/\/\_)(_____)(____/(____)


==============================================================================
TABLE OF CONTENTS                                        *orgguide* *orgguide-toc*

    1.  About Org mode guide             |orgguide-about|
    2.  Introduction                     |orgguide-introduction|
    3.  Document structure               |orgguide-docstructure|
    4.  Tables                           |orgguide-tables|
    5.  Hyperlinks                       |orgguide-hyperlinks|
    6.  Todo items                       |orgguide-todoitems|
    7.  Tags                             |orgguide-tags|
    8.  Properties                       |orgguide-properties|
    9.  Dates and Times                  |orgguide-dates|
    10. Capture - Refile - Archive       |orgguide-capture|
    11. Agenda views                     |orgguide-agenda|
    12. Markup for rich export           |orgguide-richexport|
    13. Publishing                       |orgguide-publishing|
    14. Working with source code         |orgguide-source|
    14. Miscellaneous                    |orgguide-misc|

==============================================================================
ORG MODE GUIDE                                                  *orgguide-about*

Copyright © 2010 Free Software Foundation

  Permission is granted to copy, distribute and/or modify this document under
  the terms of the GNU Free Documentation License, Version 1.3 or any later
  version published by the Free Software Foundation; with no Invariant
  Sections, with the Front-Cover texts being “A GNU Manual,” and with the
  Back-Cover Texts as in (a) below. A copy of the license is included in the
  section entitled “GNU Free Documentation License.”

  (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and modify
  this GNU manual. Buying copies from the FSF supports it in developing GNU and
  promoting software freedom.”

  This document is part of a collection distributed under the GNU Free
  Documentation License. If you want to distribute this document separately
  from the collection, you can do so by adding a copy of the license to the
  document, as described in section 6 of the license.

==============================================================================
INTRODUCTION                                             *orgguide-introduction*

------------------------------------------------------------------------------
Preface~
   Org is a mode for keeping notes, maintaining TODO lists, and doing
   project planning with a fast and effective plain-text system. It is also
   an authoring and publishing system.

   This document is a a copy of the orgmode-guide for emacs with modifications
   for vim. It contains all basic features and commands, along with important
   hints for customization.

------------------------------------------------------------------------------
Installation~
   TODO

------------------------------------------------------------------------------
Activation~
   TODO

------------------------------------------------------------------------------
Feedback~
   If you find problems with Org, or if you have questions, remarks, or
   ideas about it, please create a ticket on
   https://github.com/jceb/vim-orgmode


==============================================================================
DOCUMENT STRUCTURE                                       *orgguide-docstructure*

Org is based on Outline mode and provides flexible commands to edit the
structure of the document.


------------------------------------------------------------------------------
Outlines~
   Org is implemented on top of Outline mode. Outlines allow a document to
   be organized in a hierarchical structure, which (at least for me) is the
   best representation of notes and thoughts. An overview of this structure
   is achieved by folding (hiding) large parts of the document to show only
   the general document structure and the parts currently being worked on.
   Org greatly simplifies the use of outlines by compressing the entire
   show/hide functionality into a single command, =org-cycle=, which is
   bound to the <TAB> key.


------------------------------------------------------------------------------
Headlines~
   Headlines define the structure of an outline tree. The headlines in Org
   start with one or more stars, on the left margin[[#FOOT1][(1)]]. For
   example:

>
    * Top level headline
    ** Second level
    *** 3rd level
        some text
    *** 3rd level
        more text

    * Another top level headline
<

   Some people find the many stars too noisy and would prefer an outline
   that has whitespace followed by a single star as headline starters.
   [[#Clean-view][A cleaner outline view]], describes a setup to realize
   this.

------------------------------------------------------------------------------
Visibility cycling~
   Outlines make it possible to hide parts of the text in the buffer. Org
   uses just two commands, bound to <TAB> and S-<TAB> to change the
   visibility in the buffer.

   <TAB> :: /Subtree cycling/: Rotate current subtree among the states

>
       ,-> FOLDED -> CHILDREN -> SUBTREE --.
       '-----------------------------------'
<

   When called with a prefix argument (C-u <TAB>) or with the shift key,
   global cycling is invoked.

   S-<TAB> and C-u <TAB> :: /Global cycling/: Rotate the entire buffer
   among the states

>
       ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
       '--------------------------------------'
<

   C-u C-u C-u <TAB> :: Show all, including drawers.

   When Emacs first visits an Org file, the global state is set to
   OVERVIEW, i.e. only the top level headlines are visible. This can be
   configured through the variable =org-startup-folded=, or on a per-file
   basis by adding a startup keyword =overview=, =content=, =showall=, like
   this:

>
    #+STARTUP: content
<

------------------------------------------------------------------------------
Motion~
    TODO

------------------------------------------------------------------------------
Structure editing~
    TODO

------------------------------------------------------------------------------
Sparse trees~
    TODO

------------------------------------------------------------------------------
Plain lists~
    TODO

------------------------------------------------------------------------------
Footnotes~
    TODO

==============================================================================
TABLES                                                         *orgguide-tables*

TODO

==============================================================================
HYPERLINKS                                                 *orgguide-hyperlinks*

TODO

------------------------------------------------------------------------------
Link format~
   TODO

------------------------------------------------------------------------------
Internal links~
   TODO

------------------------------------------------------------------------------
External links~
   TODO

------------------------------------------------------------------------------
Handling links~
   TODO

------------------------------------------------------------------------------
Targeted links~
   TODO

==============================================================================
TODO ITEMS                                                  *orgguide-todoitems*

TODO

==============================================================================
TAGS                                                             *orgguide-tags*

TODO

==============================================================================
PROPERTIES                                                 *orgguide-properties*

TODO

==============================================================================
DATES AND TIMES                                                 *orgguide-dates*

To assist project planning, TODO items can be labeled with a date and/or
a time. The specially formatted string carrying the date and time
information is called a timestamp in Org mode.

------------------------------------------------------------------------------
Timestamps~
    A timestamp is a specification of a date (possibly with a time or a
    range of times) in a special format, either <2003-09-16 Tue> or
    <2003-09-16 Tue 09:39> or <2003-09-16 Tue 12:00-12:30>. A timestamp
    can appear anywhere in the headline or body of an Org tree entry. Its
    presence causes entries to be shown on specific dates in the agenda (see
    section [[#Weekly_002fdaily-agenda][The weekly/daily agenda]]). We
    distinguish:

    Plain timestamp; Event; Appointment ~
        A simple timestamp just assigns a date/time to an item. This is just
        like writing down an appointment or event in a paper agenda.
>
    * Meet Peter at the movies <2006-11-01 Wed 19:15>
    * Discussion on climate change <2006-11-02 Thu 20:00-22:00>
<

    Timestamp with repeater interval ~
        A timestamp may contain a /repeater interval/, indicating that it
        applies not only on the given date, but again and again after a certain
        interval of N days (d), weeks (w), months (m), or years (y). The
        following will show up in the agenda every Wednesday:
>
    * Pick up Sam at school <2007-05-16 Wed 12:30 +1w>
<

    Diary-style sexp entries ~
        For more complex date specifications, Org mode supports using the
        special sexp diary entries implemented in the Emacs calendar/diary
        package. For example:
>
        * The nerd meeting on every 2nd Thursday of the month
          <%%(diary-float t 4 2)>
<

    Time/Date range~
        Two timestamps connected by ‘--’ denote a range.
>
    ** Meeting in Amsterdam
       <2004-08-23 Mon>--<2004-08-26 Thu>
<

    Inactive timestamp~
        Just like a plain timestamp, but with square brackets instead of
        angular ones. These timestamps are inactive in the sense that they do
        /not/ trigger an entry to show up in the agenda.
>
            * Gillian comes late for the fifth time [2006-11-01 Wed]
<


------------------------------------------------------------------------------
Creating timestamps~

For Org mode to recognize timestamps, they need to be in the specific
format. All commands listed below produce timestamps in the correct
format.

                                                           *orgmode-<leader>-sa*
<LEADER>sa          Prompt for a date and insert a corresponding timestamp.

                    TODO: not implemented yet When the cursor is at an
                    existing timestamp in the buffer, the command is used to
                    modify this timestamp instead of inserting a new one.

                    TODO: not implemented yet
                    When this command is used twice in succession, a time 
                    range is inserted. With a prefix, also add the current
                    time.

                                                            *orgmode-<leader>si*
<LEADER>si          Like |orgmode-<leader>-sa|, but insert an inactive timestamp
                    that will not cause an agenda entry.

                                              *orgmode-ctrl-a* or *orgmode-ctrl-x*
CTRL-A or CTRL-X    Change the item under the cursor in a timestamp.
                    The cursor can be on a year, month, day, hour or minute.
                    NOTE: The plugin 'speeddating' should be installed for
                    this feature.

                    TODO: not implemented yet.
                    When the timestamp contains a time range like
                    ‘15:30-16:30’, modifying the first time will also shift
                    the second, shifting the time block with constant length.
                    To change the length, modify the second time.

When Org mode prompts for a date/time, it will accept any string containing
some date and/or time information, and intelligently interpret the string,
deriving defaults for unspecified information from the current date and time.
See the manual for more information on how exactly the date/time prompt works.

TODO: not implemented yet.
You can also select a date in the pop-up calendar. 

------------------------------------------------------------------------------
Deadlines and scheduling~
   TODO: not implemented yet.

------------------------------------------------------------------------------
Clocking work time~
   TODO: not implemented yet.

==============================================================================
CAPTURE - REFILE - ARCHIVE                                   *orgguide-capture*

TODO

==============================================================================
AGENDA VIEWS                                                   *orgguide-agenda*

TODO

==============================================================================
MARKUP FOR RICH EXPORT                                     *orgguide-richexport*

TODO

==============================================================================
PUBLISHING                                                 *orgguide-publishing*

TODO

==============================================================================
WORKING WITH SOURCE CODE                                       *orgguide-source*

TODO

==============================================================================
MISCELLANEOUS                                                    *orgguide-misc*

TODO

 vim:tw=78:ts=8:expandtab:ft=help:norl:
