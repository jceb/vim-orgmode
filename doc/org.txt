*org.txt*		For Vim version 7.3	       Last change: 2011 June 26

==============================================================================
TABLE OF CONTENTS						   *org* *org-toc*

    1. Description			|org-description|
    2. Installation			|org-installation|
    3. Usage				|org-usage|
    4. Customization			|org-customization|
    5. Development			|org-development|
    6. Links				|org-links|
    7. Changelog			|org-changelog|
    8. License				|org-license|

==============================================================================
DESCRIPTION						       *org-description*

Text outlining and task management for Vim based on Emacs' Org-Mode.

The idea for this plugin was born by listening to the Floss Weekly podcast
introducing Emacs Org-Mode (http://twit.tv/floss136). Org-Mode has a lot of
strong features like folding, views (sparse tree) and scheduling of tasks.
These are completed by hyperlinks, tags, todo states, priorities aso.

Vim-orgmode aims at providing the same functionality for Vim and for command
line tools*.

* for command line tools and other programs a library liborgmode is provided.
  It encapsulates all functionality for parsing and modifying Org-Mode files.

==============================================================================
INSTALLATION						      *org-installation*

Prerequisites~
   Add the following lines to your .vimrc file to ensure that filetype plugins
   are loaded properly:

>
	filetype on
	filetype plugin on
	filetype indent on
<

   Please install the Universal Text Linking
   (http://www.vim.org/scripts/script.php?script_id=293) addon, otherwise
   hyperlinks won't work. Other plugins that integrate well with vim orgmode
   are listed in section Suggested plugins.

From .vba file~
   If you want to install the vim-orgmode plugin for a single user, this is
   the preferred way. The stable releases can be downloaded at
   http://www.vim.org/scripts/script.php?script_id=3642

   Open the file in vim and source it. Restart vim and the plugin is active:

   $ vim orgmode.vba
>
    :so %
<
   ATTENTION: All .pyc files of former versions of vim-orgmode need to be
   deleted beforehand!

Installation into a specific directory~
    If you want to install the plugin into a specific directory, e.g. when you
    are using pathogen, then just add the desired directory to the runtimepath
    before sourcing the vba-file.

    When updating from a previous version I recommend deleting the whole
    $HOME/.vim/bundle/orgmode directory to prevent out dated .pyc files
    spoiling the update.

    $ vim orgmode.vba.gz
>
    :set rtp=$HOME/.vim/bundle/orgmode,&rtp
    :so %
<
   ATTENTION: All .pyc files of former versions of vim-orgmode need to be
   deleted beforehand!

From git checkout~
   This method is mainly used for development purposes.

You are using pathogen~

    Change to the bundle directory
    $ cd ~/.vim/bundle

    Clone the repository
    $ git clone https://github.com/jceb/vim-orgmode.git

    And restart vim. That's it.

    ATTENTION: All .pyc files of former versions of vim-orgmode need to be
    deleted beforehand!

You are using no addon manager~
    Clone the repository:
    $ git clone https://github.com/jceb/vim-orgmode.git

    Copy the directories doc, ftdetect, ftplugin, indent and syntax to
    your $HOME/.vim directory:
    $ cd vim-orgmode
    $ cp -r doc ftdetect ftplugin indent syntax ~/.vim/

    ATTENTION: All .pyc files of former versions of vim-orgmode need to be
    deleted beforehand!

From .deb file~
   If you want to install the vim-orgmode plugin for all users of your
   computer, this is the preferred way.

   Install the plugin by using the Debian Package Manager:

   dpkg -i vim-orgmode_X.X.X-X.deb

   The plugin is installed in /usr/lib/vim/addons. Please make sure this
   directory part of your runtimepath. By default it's not! Add the following
   command to your .vimrc to add the path on startup:

>
   :set rtp=/usr/lib/vim/addons,&rtp
<

==============================================================================
USAGE								     *org-usage*

  vim-orgmode aims to be clone of the original orgmode for Emacs. Since Emacs
  is not vim the clone is not aiming for 100% compatibility.  Especially in
  terms of the keybindings there will be major differences!

  You'll definitively enjoy the modal interface, this where vim's strength is.
  Almost all keybindings for orgmode work only in normal and visual mode where
  as in insert mode just a few are available.

  Start of with vim-orgmode by open a file with the extension .org. An
  additional menu "Org" is shown that gives an overview of the implemented
  functionality and the keybindings.

Text objects~
   Vim offers a mighty feature called text-objects. A text-object is bound to
   a certain character sequence that can be used in combination with all kinds
   of editing and selection tasks. vim-orgmode offers the following
   text-objects:

   ih - inner heading, referring to the current heading excluding the heading
        level characters (*)
   ah - a heading, referring to the current heading including everything
   it - inner subtree, starting with the current heading
   at - a subtree, starting with the current heading
   Oh - inner outer heading, referring to the parent
   Ot - inner outer heading, including subtree, referring to the parent
   OH - a outer heading
   OT - a outer subtree

   Movement commands can also be used for editing like text-objects:

   g{ - execute command from current position to the beginning of the parent
        heading
   g} - execute command from current position to the beginning of the parent's
        next sibling
   {  - execute command from current position to the beginning of the current
        heading
   }  - execute command from current position to the end of the current
        heading
   [[ - execute command from current position to the beginning of the previous
        heading sibling
   ]] - execute command from current position to the end of the next heading
        sibling

   For further information please read :h text-objects-changed

==============================================================================
DEFAULT MAPPINGS						*org-mappings*

These are the default mappings that are installed and can be used via the
'Org' menu or directly. Most are only usable in command mode.
 
								*org-visibility*
Show/Hide:~

  <TAB>		    - Cycle Visibility

								*org-structure*
Editing Structure:~
  
  <C-S-CR>	    - Heading above
  <S-CR>	    - Heading below
  <C-CR>	    - Heading above, after children

  m]]		    - move subtree down
  m[[		    - move subtree up

  yah		    - yank heading 
  dah		    - delete heading 
  yat		    - yank subtree
  dat		    - delete subtree
  p		    - paste subtree
	
  >> or >ah	    - promote heading
  << or <ah	    - demote heading
  >at		    - promote subtree
  <at		    - demote subtree

								*org-hyperlinks*
Hyperlinks:~

  gl		    - goto link
  gyl		    - yank link
  gil		    - insert link

  gn		    - next link
  go		    - previous link

								*org-todo*
TODO Lists:~
  
  ,d		    - select keyword
  <S-Left>	    - previous keyword
  <S-Right>	    - next keyword
  <C-S-Left>	    - previous keyword set
  <C-S-Right>	    - next keyword set

						*org-tags* *org-properties*
TAGS and properties:~

  ,t		    - set tags
  
								*org-dates*
Dates:~
  
  ,sa		    - insert date
  ,sai		    - insert inactive date

  For more functionality, see |org-plugins| and |org-customization|.

==============================================================================
PLUGINS								*org-plugins* 
Suggested plugins~
  - pathogen (http://www.vim.org/scripts/script.php?script_id=2332)
    easy management of multiple vim plugins

  - repeat (http://www.vim.org/scripts/script.php?script_id=2136)
    repeat actions that would not be repeatable otherwise

  - taglist ([http://www.vim.org/scripts/script.php?script_id=273)
    display tags for the currently edited file

  - tagbar (http://www.vim.org/scripts/script.php?script_id=3465)
    a new approach to displaying tags for the currently edited file

  - speeddating (http://www.vim.org/scripts/script.php?script_id=2120)
    in-/decrease dates the vim way: C-a and C-x

  - Narrow Region (http://www.vim.org/scripts/script.php?script_id=3075)
    emulation of Emacs' Narrow Region feature

  - Universal Text Linking
    (http://www.vim.org/scripts/script.php?script_id=293) general support for
    text linking, the Hyperlinks feature of vim-orgmode depends on this plugin

==============================================================================
CUSTOMIZATION						     *org-customization*

Remapping shortcuts~
  vim-orgmode provides an easy way for remapping the default keyboard
  shortcuts. For this task it relies on vim's <Plug> mappings. All shortcuts
  of vim-orgmode are accessible by <Plug>s.

  To change a keyboard shortcut the name of the related <Plug> is needed.
  First we need to look up the current mapping in the Org menu. The following
  command reveals the <Plug>'s name:
>
  :map <current_mapping>
<

  The result should look something like this:
>
  :map ,t
  n ,t @<Plug>OrgSetTags
<

  Now we can create an alternate mapping:
>
  nmap <new_mapping> <the_plug>
<

  To change the mapping for editing tags to <leader>t the vimrc entry would
  look like this:
>
  nmap <leader>t @<Plug>OrgSetTags
<

Syntax highlighting~
Syntax highlighting is customizable to fit nicely with the user's colorscheme.

					        *g:org_heading_highlight_colors*
Define the highlighting colors/group names for headings (default):
>
    let g:org_heading_highlight_colors = ['Title', 'Constant', 'Identifier',
    \		'Statement', 'PreProc', 'Type', 'Special']
<

					        *g:org_heading_highlight_levels*
Definie the number of levels of highlighting. If this number is bigger than
the list of colors defined in of g:org_heading_highlight_colors the colors of
g:org_heading_highlight_colors get repeated (default):
>
    let g:org_heading_highlight_levels = len(g:org_heading_highlight_colors)
<

					     *g:org_heading_shade_leading_stars*
Defines if leading stars are displayed in the color of the heading or if a
special NonText highlighting is used that hides them from user (default):
>
    let g:org_heading_shade_leading_stars = 1
<

				    			   *g:org_todo_keywords*
Defines the keywords that are highlighted in headings. For more information
about this variable, please consult the org-mode documentation
(http://orgmode.org/org.html#index-org_002dtodo_002dkeywords-511) (default):
>
    let g:org_todo_keywords = ['TODO', '|', 'DONE']
<

				    		      *g:org_todo_keyword_faces*
Defines special faces (styles) for displaying g:org_todo_keywords. Please
refer to vim documentation (topic |attr-list|) for allowed values for
:weight, :slant, :decoration. Muliple colors can be separated by comma for
:foreground and :background faces to provide different colors for gui and
terminal mode (default):
>
    let g:org_todo_keyword_faces = []
<

Syntax Highlighting Examples~
Define an additionaly keyword 'WAITING' and set the foreground color to
'cyan'. Define another keyword 'CANCELED' and set the foreground color to
red, background to black and the weight to normal, slant to italc and
decoration to underline:

>
    let g:org_todo_keywords = [['TODO', 'WAITING', '|', 'DONE'],
    \		['|', 'CANCELED']]
    let g:org_todo_keyword_faces = [['WAITING', 'cyan'], ['CANCELED',
    \		[':foreground red', ':background black', ':weight bold',
    \		':slant italic', ':decoration underline']]]
<

==============================================================================
DEVELOPMENT						       *org-development*

Building a Vimball~
   Vimball is an archive format for vim plugins. It's of use when you want to
   install vim-orgmode for a single user. To build a Vimball just run the
   following command in the root folder of this plugin.  Please make sure that
   vim is installed on your computer:

   make vba

   For installing the plugin form the resulting orgmode.vba.gz file, please
   refer to the Installation section.

Building a Debian Package~
   A Debian package is of use when you want to make vim-orgmode available to
   all users on your computer. Make sure you've debhelper and vim installed,
   than run the following command from the root directory of this plugin to
   build the debian package:

   dpkg-buildpackage -us -uc

   For installing the plugin form the resulting vim-orgmode_X.X.X-X.deb file,
   please refer to the Installation section.

Source code~

 Files and folders~
    debian/                  - files needed for building a Debian package
    doc/                     - vim documentation
    documention/             - development documentation
    examples/                - plugin examples
    ftdetect/                - Filetype detection for orgmode files
    ftplugin/                - Home of the main part of the plugin
    ftplugin/orgmode/        - Home for all Python code related to the plugin
    ftplugin/orgmode/plugins - Home for all orgmode plugins
    ftplugin/liborgmode.py   - General library for accessing and manipulating
                               org-mode files
    indent/                  - Indentation for orgmode files
    test/                    - Tests to verify the consistency and correctness
                               of the plugin
    syntax/                  - Syntax highlighting
    build_vba.vim            - Build file for creating a Vimball
    install_vba.vim          - Local installation of vba via make target
                               installvba
    LICENSE                  - License Information
    README.org               - Documentation
    Makefile

 Structure~
    The majority of the source code is stored in folder ftplugin/orgmode. This
    is where the actual functionality of the plugin is located.

    I choose to implement vim-orgmode mainly in Python. I hope this will ease
    the implementation especially with the functionality of the Python standard
    library at hand.

    Right below the directory ftplugin/orgmode the basic implementation of
    vim-orgmode is found. This basic functionality provides everything for
    higher level implementations that modify the buffer, provide a menu and
    keybindings to the user and everything else that is needed.

    Below the directory ftplugin/orgmode/plugins the plugins are located. Every
    plugin must provide a class equal to its filename with the .py-extension.
    An example for a plugin can be found in file
    ftplugin/orgmode/plugins/Example.py.

    Every plugin must be enabled by the user by setting the g:org_plugins
    variable. By default all shipped plugins are enabled.  Example:
>
    let g:org_plugins = ['ShowHide', '|', 'Navigator', 'EditStructure']
<

 Writing a plugin~
    To write a plugin:
    1. copy file ftplugin/orgmode/plugins/Example.py to
       ftplugin/orgmode/plugins/YourPlugin.py
    2. Change class name to "YourPlugin"
    3. Set the menu name, it doesn't need to match the filename anymore,
       e.g. "Your Plugin"
    4. Prepare keybindings in function register by defining a proper
       action and a key this action should be mapped to. For further
       information refer to section Keybindings.
    5. Register your plugin:
>
       let g:org_plugins = ['ShowHide', '|', 'Navigator', 'EditStructure', 'YourPlugin']
<
    6. Implement YourPlugin

 Keybindings~
    Keybindings alias mappings are described very well in the vim
    documentation, see |map-modes|. vim-orgmode tries to make it easy for the
    developer to register new keybindings, make them customizable and provide
    menu entries so that the user can access the functionality like in original
    orgmode.

    This is done by providing three classes: Keybinding, Plug and ActionEntry

  Keybinding~
     This is the basic class that encapsulates a single keybinding consisting
     of a key/mapping and an action. Several options can be set when creating
     the object to specify the mode and all kinds of other things.

     If a Plug is given instead of an action string the Plug is bound to the
     key. All relevant data is read from the Plug, e.g. name, mode aso.

  Example~
      Map g{ to moving to parent heading in normal mode:

      Keybinding('g{', ':py ORGMODE.plugins["Navigator"].parent(mode="normal")<CR>', mode=MODE_NORMAL)
      vim -> :nmap g{ :py ORGMODE.plugins["Navigator"].parent(mode="normal")<CR>

      Map g{ to moving to parent heading in normal mode by using a Plug:

      Keybinding('g{', Plug('OrgJumpToParentNormal', ':py ORGMODE.plugins["Navigator"].parent(mode="normal")<CR>'))
      vim -> :nnoremap <Plug>OrgJumpToParentNormal :py ORGMODE.plugins["Navigator"].parent(mode="normal")<CR>
      vim -> :nmap g{ <Plug>OrgJumpToParentNormal

  Plug~
     A Plug is a unique keybinding that can not be executed by pressing
     any key. This makes it a special Keybinding that takes a name and
     an action to create an object. A plug normally goes together with a
     regular Keybinding to bind the Plug to a key.

     This special behavior is needed to ensure that keybindings are
     customizable by the user. If the user creates a keybinding to a
     Plug the Keybinding object makes sure that the users keybinding is
     used and the keybinding specified by the plugin is not used.

  Example~
      Map g{ to moving to parent heading in normal mode by using a Plug:

      Keybinding('g{', Plug('OrgJumpToParentNormal', ':py ORGMODE.plugins["Navigator"].parent(mode="normal")<CR>'))
      vim -> :nnoremap <Plug>OrgJumpToParentNormal :py ORGMODE.plugins["Navigator"].parent(mode="normal")<CR>
      vim -> :nmap g{ <Plug>OrgJumpToParentNormal

  ActionEntry~
     An ActionEntry makes Keybindings accessible by the vim menu. It takes a
     description and a Keybinding object and builds a menu entry from this. The
     resulting object can be added to a Submenu object by using the + operator.

  Example~
      Map g{ to moving to parent heading in normal mode by using a Plug:

      k = Keybinding('g{', Plug('OrgJumpToParentNormal', ':py ORGMODE.plugins["Navigator"].parent(mode="normal")<CR>'))
      vim -> :nnoremap <Plug>OrgJumpToParentNormal :py ORGMODE.plugins["Navigator"].parent(mode="normal")<CR>
      vim -> :nmap g{ <Plug>OrgJumpToParentNormal

      menu + ActionEntry('&Up', k)
      vim -> :nmenu &Org.&Naviagte Headings.&Up<Tab>g{ <Plug>OrgJumpToParentNormal

==============================================================================
LINKS								     *org-links*

- Original org-mode for Emacs (http://orgmode.org)

- VimOrganizer, another vim port of Emacs org-mode
  (http://www.vim.org/scripts/script.php?script_id=3342)

==============================================================================
CHANGELOG							 *org-changelog*

0.3.1-0
- demoting a newly created second level heading doesn't cause all children to
  be deleted anymore (closes issue #65)
- add error message for missing dependencies (closes issue #59)

0.3.0-0, 2011-08-09
- fix completion menu popup that disappeared because of the usage of vim.command
  (closes issue #48)
- implement interactive todo state selection (closes issue #5)
- add orgmode group to au commands in TagProperties plugin (closes issue #53)
- allow demotion of first level headings (closes issue #27)
- fix encoding issues in Date plugin
- add general support for multiple todo sequences (closes Issue #46)
- fix folded text for headings containing backslashes or double quotes (closes
  issue #26)
- add Document.get_todo_states() and Document.get_all_todo_states()
- don't confuse upper case words at the beginning of a heading with a todo
    state (closes issue #28)
- fix error in setting tags (issue #25)
- improve split of heading (issue #24)
- add variable g:org_improve_split_heading to enable/disable improve the split
  of headings (issue #24)
- implement shortcut for moving to the partent's next sibling (g}) (issue #22)
- fix duplication of children when inserting a new heading (issue #20)
- always start insert mode when adding a new heading (issue #21)

0.2.1-0, 2011-06-26
- fix encoding of todo states set by the Todo plugin (thanks to Daniel Carl
  and kien for pointing out the issue)
- add documentation for remapping shortcuts
- add documentation for customizing syntax highlighting

0.2.0-0, 2011-06-25
- initial release

==============================================================================
LICENSE								   *org-license*

Copyright (C) 2010, 2011 Jan Christoph Ebersbach

http://www.e-jc.de/

All rights reserved.

The source code of this program is made available under the terms of the GNU
Affero General Public License version 3 (GNU AGPL V3) as published by the Free
Software Foundation.

Binary versions of this program provided by Univention to you as well as other
copyrighted, protected or trademarked materials like Logos, graphics, fonts,
specific documentations and configurations, cryptographic keys etc. are
subject to a license agreement between you and Univention and not subject to
the GNU AGPL V3.

In the case you use this program under the terms of the GNU AGPL V3, the
program is provided in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
details.

You should have received a copy of the GNU Affero General Public License with
the Debian GNU/Linux or Univention distribution in file
/usr/share/common-licenses/AGPL-3; if not, see <http://www.gnu.org/licenses/>.

 vim:tw=78:ts=8:ft=help:norl:
